name: "Pull Request"

on:
  pull_request:
  workflow_dispatch:

jobs:
  prepare:
    name: "Prepare"
    runs-on: ubuntu-latest
    outputs:
      workspaces: ${{ steps.workspaces.outputs.this }}
      sha: ${{ steps.sha.outputs.this }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Discover workspaces
        id: workspaces
        run: echo "::set-output name=this::$(ls github | jq --raw-input '[.]' | jq -sc add)"
      - name: Comment on pull request
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@39c5b5dc7717447d0cba270cd115037d32d28443 # v2.2.0
        with:
          message: |
            Before merge, verify that all the following plans are correct. They will be applied as-is after the merge.

            #### Terraform plans
      - name: Find sha for plan
        id: sha
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ '${{ github.event_name }}' == 'pull_request' ]]; then
            sha='${{ github.event.pull_request.head.sha }}'
          else
            sha='${{ github.sha }}'
          fi
          echo "::set-output name=this::$sha"
  plan:
    needs: [prepare]
    if: needs.prepare.outputs.workspaces != ''
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(needs.prepare.outputs.workspaces) }}
    name: "Plan"
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: 1
      TF_INPUT: 0
      TF_WORKSPACE: ${{ matrix.workspace }}
      GITHUB_APP_ID: ${{ secrets[format('TF_GITHUB_APP_ID_{0}', matrix.workspace)] }}
      GITHUB_APP_INSTALLATION_ID: ${{ secrets[format('TF_GITHUB_APP_INSTALLATION_ID_{0}', matrix.workspace)] }}
      GITHUB_APP_PEM_FILE: ${{ secrets[format('TF_GITHUB_APP_PEM_FILE_{0}', matrix.workspace)] }}
    defaults:
      run:
        shell: bash
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup terraform
        uses: hashicorp/setup-terraform@3d8debd658c92063839bc97da5c2427100420dec # v1.3.2
        with:
          terraform_version: 1.1.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Initialize terraform
        run: terraform init
      - name: Format terraform
        run: terraform fmt -check
      - name: Validate terraform
        run: terraform validate -no-color
      - name: Retrieve targets from config
        id: target
        run: echo "::set-output name=this::$(jq -r 'split(" ")[:-1] | map("-target=github_\(sub(".json$"; "")).this") | join(" ")' <<< '"'"$(ls | tr '\n' ' ')"'"')"
        working-directory: github/${{ env.TF_WORKSPACE }}
      - name: Plan terraform
        id: plan
        run: terraform plan ${{ steps.target.outputs.this }} -refresh=false -out=.tfplan -no-color
        continue-on-error: true
      - name: Append plan to comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@39c5b5dc7717447d0cba270cd115037d32d28443 # v2.2.0
        with:
          append: true
          message: |
            <details><summary>${{ env.TF_WORKSPACE }}</summary>

            ```
            ${{ steps.plan.outputs.stdout }}
            ${{ steps.plan.outputs.stderr }}
            ```

            </details>
      - name: Exit if terraform plan failed
        if: steps.plan.outputs.exitcode != 0
        run: exit ${{ steps.plan.outputs.exitcode }}
      - name: Upload terraform plan
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TF_WORKSPACE }}_${{ needs.prepare.outputs.sha }}.tfplan
          path: terraform/.tfplan
          if-no-files-found: error
          retention-days: 90
